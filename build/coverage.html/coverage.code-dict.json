{"/home/travis/build/npmtest/node-npmtest-node-plantuml/test.js":"/* istanbul instrument in package npmtest_node_plantuml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/lib.npmtest_node_plantuml.js":"/* istanbul instrument in package npmtest_node_plantuml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_plantuml = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_plantuml = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-plantuml && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_plantuml */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_plantuml\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_plantuml.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_plantuml.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_plantuml.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_plantuml.__dirname + '/lib.npmtest_node_plantuml.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/node_modules/node-plantuml/index.js":"#!/usr/bin/env node\n'use strict'\n\nif (require.main === module) {\n  require('./lib/node-plantuml-cmd')\n} else {\n  module.exports = require('./lib/node-plantuml')\n}\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/node_modules/node-plantuml/lib/node-plantuml.js":"'use strict'\n\nvar plantumlExecutor = require('./plantuml-executor')\nvar fs = require('fs')\nvar stream = require('stream')\nvar util = require('util')\nvar path = require('path')\nvar plantumlEncoder = require('plantuml-encoder')\n\nvar DECODE = '-decodeurl'\nvar PIPE = '-pipe'\nvar UNICODE = '-tutxt'\nvar ASCII = '-ttxt'\nvar SVG = '-tsvg'\nvar EPS = '-eps'\nvar CONFIG = '-config'\nvar TESTDOT = '-testdot'\nvar DOT = '-graphvizdot'\nvar CHARSET = '-charset'\n\nvar CONFIGS = {\n  classic: path.join(__dirname, '../resources/classic.puml'),\n  monochrome: path.join(__dirname, '../resources/monochrome.puml')\n}\n\nmodule.exports.useNailgun = plantumlExecutor.useNailgun\n\nfunction PlantumlEncodeStream () {\n  stream.Transform.call(this)\n  this.chunks = []\n}\n\nutil.inherits(PlantumlEncodeStream, stream.Transform)\n\nPlantumlEncodeStream.prototype._transform = function (chunk, encoding, done) {\n  this.chunks.push(chunk)\n  done()\n}\n\nPlantumlEncodeStream.prototype._flush = function (done) {\n  var uml = Buffer.concat(this.chunks).toString()\n  var encoded = plantumlEncoder.encode(uml)\n  this.push(new Buffer(encoded))\n  done()\n}\n\nfunction isPath (input) {\n  try {\n    fs.lstatSync(input)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nfunction arrangeArguments (input, options, callback) {\n  if (typeof input === 'function') {\n    callback = input\n    input = undefined\n  } else {\n    if (typeof options === 'function') {\n      callback = options\n      options = undefined\n    }\n    if (typeof input !== 'string' && !(input instanceof String)) {\n      options = input\n      input = undefined\n    }\n  }\n\n  return {\n    input: input,\n    options: options,\n    callback: callback\n  }\n}\n\nfunction joinOptions (argv, options) {\n  options.format = options.format || 'png'\n  switch (options.format) {\n    case 'ascii':\n      argv.push(ASCII)\n      break\n    case 'unicode':\n      argv.push(UNICODE)\n      break\n    case 'svg':\n      argv.push(SVG)\n      break\n    case 'eps':\n      argv.push(EPS)\n      break\n    case 'png':\n    default:\n      break\n  }\n\n  if (options.config) {\n    var template = CONFIGS[options.config]\n    var file = template || options.config\n    argv.push(CONFIG)\n    argv.push(file)\n  }\n\n  if (options.dot) {\n    argv.push(DOT)\n    argv.push(options.dot)\n  }\n\n  if (options.charset) {\n    argv.push(CHARSET)\n    argv.push(options.charset)\n  }\n\n  return argv\n}\n\nfunction generateFromStdin (child) {\n  return {\n    in: child.stdin,\n    out: child.stdout\n  }\n}\n\nfunction generateFromFile (path, child) {\n  var rs = fs.createReadStream(path)\n  rs.pipe(child.stdin)\n\n  return {\n    out: child.stdout\n  }\n}\n\nfunction generateFromText (text, child) {\n  child.stdin.write(text)\n  child.stdin.end()\n\n  return {\n    out: child.stdout\n  }\n}\n\nmodule.exports.generate = function (input, options, callback) {\n  var args = arrangeArguments(input, options, callback)\n  input = args.input\n  options = args.options || {}\n  callback = args.callback\n\n  var o = joinOptions([PIPE], options)\n  var child = plantumlExecutor.exec(o, options.include, callback)\n\n  if (!input) {\n    return generateFromStdin(child)\n  } else {\n    if (isPath(input, callback)) {\n      return generateFromFile(input, child)\n    } else {\n      return generateFromText(input, child)\n    }\n  }\n}\n\nfunction encodeFromStdin (encodeStream) {\n  return {\n    in: encodeStream,\n    out: encodeStream\n  }\n}\n\nfunction encodeFromFile (path, encodeStream) {\n  var rs = fs.createReadStream(path)\n  rs.pipe(encodeStream)\n\n  return {\n    out: encodeStream\n  }\n}\n\nfunction encodeFromText (text, encodeStream) {\n  encodeStream.write(text)\n  encodeStream.end()\n\n  return {\n    out: encodeStream\n  }\n}\n\nmodule.exports.encode = function (input, options, callback) {\n  var args = arrangeArguments(input, options, callback)\n  input = args.input\n  options = args.options || {}\n  callback = args.callback\n\n  var encodeStream = new PlantumlEncodeStream()\n\n  if (typeof callback === 'function') {\n    var chunks = []\n    encodeStream.on('data', function (chunk) { chunks.push(chunk) })\n    encodeStream.on('end', function () {\n      var data = Buffer.concat(chunks)\n      callback(null, data.toString())\n    })\n  }\n\n  if (!input) {\n    return encodeFromStdin(encodeStream)\n  } else {\n    if (isPath(input, callback)) {\n      return encodeFromFile(input, encodeStream)\n    } else {\n      return encodeFromText(input, encodeStream)\n    }\n  }\n}\n\nmodule.exports.decode = function (encoded, callback) {\n  var child = plantumlExecutor.exec([DECODE, encoded], callback)\n\n  return {\n    out: child.stdout\n  }\n}\n\nmodule.exports.testdot = function (callback) {\n  var child = plantumlExecutor.exec([TESTDOT])\n\n  var chunks = []\n  child.stdout.on('data', function (chunk) { chunks.push(chunk) })\n  child.stdout.on('end', function () {\n    var data = Buffer.concat(chunks)\n    var dotOkCheck = 'Installation seems OK. File generation OK'\n    var dotOk = data.toString().indexOf(dotOkCheck) !== -1\n    if (typeof callback === 'function') callback(dotOk)\n  })\n\n  return {\n    out: child.stdout\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/node_modules/node-plantuml/lib/plantuml-executor.js":"'use strict'\n\nvar childProcess = require('child_process')\nvar path = require('path')\nvar nailgun = require('node-nailgun-server')\nvar ngClient = require('node-nailgun-client')\n\nvar INCLUDED_PLANTUML_JAR = path.join(__dirname, '../vendor/plantuml.jar')\nvar PLANTUML_JAR = process.env.PLANTUML_HOME || INCLUDED_PLANTUML_JAR\n\nvar PLANTUML_NAIL_JAR = path.join(__dirname, '../nail/plantumlnail.jar')\nvar PLANTUML_NAIL_CLASS = 'PlantumlNail'\n\nvar LOCALHOST = 'localhost'\nvar GENERATE_PORT = 0\n\nvar nailgunServer\nvar clientOptions\nvar nailgunRunning = false\n\nmodule.exports.useNailgun = function (callback) {\n  var options = { address: LOCALHOST, port: GENERATE_PORT }\n  nailgunServer = nailgun.createServer(options, function (port) {\n    clientOptions = {\n      host: LOCALHOST,\n      port: port\n    }\n\n    ngClient.exec('ng-cp', [PLANTUML_JAR], clientOptions)\n    ngClient.exec('ng-cp', [PLANTUML_NAIL_JAR], clientOptions)\n\n    // Give Nailgun some time to load the classpath\n    setTimeout(function () {\n      nailgunRunning = true\n      if (typeof callback === 'function') {\n        callback()\n      }\n    }, 50)\n  })\n\n  return nailgunServer\n}\n\n// TODO: proper error handling\nfunction execWithNailgun (argv, cwd, cb) {\n  clientOptions.cwd = cwd || process.cwd()\n  return ngClient.exec(PLANTUML_NAIL_CLASS, argv, clientOptions)\n}\n\n// TODO: proper error handling\nfunction execWithSpawn (argv, cwd, cb) {\n  cwd = cwd || process.cwd()\n  var opts = [\n    '-Dplantuml.include.path=' + cwd,\n    '-Djava.awt.headless=true',\n    '-jar', PLANTUML_JAR\n  ].concat(argv)\n  return childProcess.spawn('java', opts)\n}\n\nmodule.exports.exec = function (argv, cwd, callback) {\n  if (typeof argv === 'function') {\n    callback = argv\n    argv = undefined\n    cwd = undefined\n  } else if (typeof cwd === 'function') {\n    callback = cwd\n    cwd = undefined\n  }\n\n  var task\n  if (nailgunRunning) {\n    task = execWithNailgun(argv, cwd, callback)\n  } else {\n    task = execWithSpawn(argv, cwd, callback)\n  }\n\n  if (typeof callback === 'function') {\n    var chunks = []\n    task.stdout.on('data', function (chunk) { chunks.push(chunk) })\n    task.stdout.on('end', function () {\n      var data = Buffer.concat(chunks)\n      callback(null, data)\n    })\n    task.stdout.on('error', function () {\n      callback(new Error('error while reading plantuml output'), null)\n    })\n  }\n\n  return task\n}\n","/home/travis/build/npmtest/node-npmtest-node-plantuml/node_modules/node-plantuml/lib/node-plantuml-cmd.js":"'use strict'\n\nvar fs = require('fs')\nvar os = require('os')\nvar commander = require('commander')\nvar plantuml = require('./node-plantuml')\nvar pack = require('../package.json')\n\nfunction getFormatFromOptions (options) {\n  if (options.unicode) {\n    return 'unicode'\n  } else if (options.ascii) {\n    return 'ascii'\n  } else if (options.svg) {\n    return 'svg'\n  } else if (options.eps) {\n    return 'eps'\n  }\n  return 'png'\n}\n\nfunction generate (file, options) {\n  options.format = getFormatFromOptions(options)\n  var gen\n  if (file) {\n    gen = plantuml.generate(file, options)\n  } else if (options.text) {\n    options.text = '@startuml' + os.EOL + options.text + os.EOL + '@enduml'\n    gen = plantuml.generate(options.text, options)\n  } else {\n    gen = plantuml.generate(options)\n    process.stdin.pipe(gen.in)\n  }\n\n  if (options.output) {\n    var fileStream = fs.createWriteStream(options.output)\n    gen.out.pipe(fileStream)\n  } else {\n    gen.out.pipe(process.stdout)\n  }\n}\n\nfunction encode (file, options) {\n  var en\n  if (file) {\n    en = plantuml.encode(file)\n  } else if (options.text) {\n    en = plantuml.encode(options.text)\n  } else {\n    en = plantuml.encode()\n    process.stdin.pipe(en.in)\n  }\n\n  if (en) {\n    en.out.on('data', function (chunk) { process.stdout.write(chunk) })\n    en.out.on('end', function () {\n      process.stdout.write('\\n')\n    })\n  }\n}\n\nfunction decode (url, options) {\n  var de = plantuml.decode(url)\n  de.out.pipe(process.stdout)\n}\n\nfunction testdot () {\n  var dot = plantuml.testdot()\n  dot.out.pipe(process.stdout)\n}\n\ncommander.version(pack.version)\n\ncommander\n  .command('generate [file]')\n  .description('Generate an UML diagram from PlantUML source')\n  .option('-p, --png', 'ouput an UML diagram as a PNG image')\n  .option('-s, --svg', 'ouput an UML diagram as an SVG image')\n  .option('-e, --eps', 'ouput an UML diagram as an EPS image')\n  .option('-u, --unicode', 'ouput an UML diagram in unicode text')\n  .option('-a, --ascii', 'ouput an UML diagram in ASCII text')\n  .option('-o --output [file]', 'the file in which to save the diagram')\n  .option('-c, --config [file]', 'config file read before the diagram')\n  .option('-t, --text [text]', 'UML text to generate from')\n  .option('-d, --dot [file]', 'specify Graphviz dot executable')\n  .option('-i, --include [path]', 'specify the path to include from')\n  .option('-C, --charset [charset]', 'specify the charset of PlantUML source')\n  .action(generate)\n\ncommander\n  .command('encode [file]')\n  .description('Encodes PlantUML source')\n  .option('-t, --text [text]', 'UML text to encode')\n  .action(encode)\n\ncommander\n  .command('decode <url>')\n  .description('Decodes PlantUML source')\n  .action(decode)\n\ncommander\n  .command('testdot')\n  .description('Test the installation of Graphviz dot')\n  .action(testdot)\n\ncommander.parse(process.argv)\n\nif (!process.argv.slice(2).length || process.argv[2] === 'help') {\n  commander.outputHelp()\n}\n"}